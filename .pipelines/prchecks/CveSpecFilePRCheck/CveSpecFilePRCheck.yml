trigger: none

pr:
  branches:
    include:
      - fasttrack/abadawi/test/3.0
  paths:
    include:
      - '**/*.spec'
      - '**/*.patch'

name: Automaton-OpenAI-PR-Check

pool:
  name: mariner-dev-build-1es-mariner2-amd64

parameters:
  - name: failOnWarnings
    displayName: Fail pipeline on warnings
    type: boolean
    default: false
  - name: useExitCodeSeverity
    displayName: Use different exit codes based on severity
    type: boolean
    default: true
  - name: postGitHubComments
    displayName: Post analysis results as GitHub PR comments
    type: boolean
    default: true
  - name: useGitHubChecks
    displayName: Use GitHub Checks API for status updates
    type: boolean
    default: true

variables:
  # Secret variable group containing GITHUB_APP_ID & GITHUB_APP_INSTALLATION_ID
  - group: SpecGuard App Config

  # Map parameters into shell-visible env vars
  FAIL_ON_WARNINGS: ${{ parameters.failOnWarnings }}
  USE_EXIT_CODE_SEVERITY: ${{ parameters.useExitCodeSeverity }}
  POST_GITHUB_COMMENTS: ${{ parameters.postGitHubComments }}
  USE_GITHUB_CHECKS: ${{ parameters.useGitHubChecks }}

steps:
  # 1) Checkout the repo
  - checkout: self
    fetchDepth: 2
    persistCredentials: true

  # 2) (Optional) Debug workspace
  - task: Bash@3
    displayName: 'üîç Debug workspace'
    inputs:
      targetType: inline
      script: |
        echo "Working directory: $(pwd)"
        ls -R . | head -n 50

  # 3) Apply your OpenAI UMI login + config
  - task: Bash@3
    displayName: '‚öôÔ∏è  Apply OpenAI Config'
    inputs:
      targetType: inline
      script: |
        cd prchecks/CveSpecFilePRCheck
        bash apply-security-config.sh --openaiModel=o3-mini

  # 4) Verify system Python
  - task: Bash@3
    displayName: 'üêç Verify Python'
    inputs:
      targetType: inline
      script: |
        python3 --version
        which python3

  # 5) Download your GitHub App private key
  - task: DownloadSecureFile@1
    name: FetchAppKey
    inputs:
      secureFile: 'SpecGuardAppKey.pem'

  # 6) Generate a GitHub App installation token
  #    The script now lives under prchecks/CveSpecFilePRCheck/
  - task: Bash@3
    name: GetAppToken
    displayName: 'üîë Generate SpecGuard App token'
    inputs:
      targetType: inline
      script: |
        chmod +x prchecks/CveSpecFilePRCheck/get-github-app-token.sh
        echo "Generating installation token..."
        TOKEN=$(prchecks/CveSpecFilePRCheck/get-github-app-token.sh \
           "$(GITHUB_APP_ID)" \
           "$(GITHUB_APP_INSTALLATION_ID)" \
           "$(Agent.TempDirectory)/SpecGuardAppKey.pem")
        # Publish as secret for subsequent steps
        echo "##vso[task.setvariable variable=GITHUB_ACCESS_TOKEN;issecret=true]$TOKEN"

  # 7) Run the PR Check under the App token
  - task: Bash@3
    displayName: 'üîç Run PR Check as SpecGuard'
    env:
      GITHUB_ACCESS_TOKEN:   $(GITHUB_ACCESS_TOKEN)    # from GetAppToken
      GITHUB_REPOSITORY:     $(Build.Repository.Name)
      BUILD_SOURCEBRANCH:    $(Build.SourceBranch)
      FAIL_ON_WARNINGS:      $(FAIL_ON_WARNINGS)
      USE_EXIT_CODE_SEVERITY: $(USE_EXIT_CODE_SEVERITY)
      POST_GITHUB_COMMENTS:  $(POST_GITHUB_COMMENTS)
      USE_GITHUB_CHECKS:     $(USE_GITHUB_CHECKS)
    inputs:
      targetType: inline
      script: |
        cd prchecks/CveSpecFilePRCheck
        chmod +x run-pr-check.sh
        ./run-pr-check.sh \
          ${FAIL_ON_WARNINGS:+--fail-on-warnings} \
          ${USE_EXIT_CODE_SEVERITY:+--exit-code-severity} \
          ${POST_GITHUB_COMMENTS:+--post-github-comments} \
          ${USE_GITHUB_CHECKS:+--use-github-checks}