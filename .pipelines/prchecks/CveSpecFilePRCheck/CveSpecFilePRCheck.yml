# prchecks/CveSpecFilePRCheck/CveSpecFilePRCheck.yml
# Trigger on PRs to fasttrack/abadawi/test/3.0 when .spec or .patch files change
# Uses the CBL-Mariner bot PAT from key vault to post PR comments on GitHub
# Also performs anti-pattern detection and AI analysis of spec file changes

# ──────────────────────────────────────────────────────────────────────────────
# 1) Reference your GitHub service connection here
# ──────────────────────────────────────────────────────────────────────────────
resources:
  repositories:
    - repository: self
      type: github
      name: microsoft/azurelinux   # <org>/<repo>
      endpoint: microsoft          # <your service-connection name>

trigger: none

pr:
  branches:
    include:
      - fasttrack/abadawi/test/3.0
  paths:
    include:
      - '**/*.spec'
      - '**/*.patch'

name: Automaton-OpenAI-PR-Check

pool:
  name: mariner-dev-build-1es-mariner2-amd64

parameters:
  - name: failOnWarnings
    displayName: Fail pipeline on warnings
    type: boolean
    default: false
  - name: useExitCodeSeverity
    displayName: Use different exit codes based on severity
    type: boolean
    default: true
  - name: postGitHubComments
    displayName: Post analysis results as GitHub PR comments
    type: boolean
    default: true
  - name: useGitHubChecks
    displayName: Use GitHub Checks API for status updates
    type: boolean
    default: true

variables:
  FAIL_ON_WARNINGS:      ${{ parameters.failOnWarnings }}
  USE_EXIT_CODE_SEVERITY: ${{ parameters.useExitCodeSeverity }}
  POST_GITHUB_COMMENTS:  ${{ parameters.postGitHubComments }}
  USE_GITHUB_CHECKS:     ${{ parameters.useGitHubChecks }}
  # Explicitly set the GitHub PR number from Azure DevOps variables
  GITHUB_PR_NUMBER:      $(System.PullRequest.PullRequestNumber)
  GITHUB_REPOSITORY:     $(Build.Repository.Name)

steps:
  # 1) Clone the repo with OAuth token access
  - checkout: self
    fetchDepth: 2
    persistCredentials: true

  # 2) Debug GitHub Integration Settings
  - task: Bash@3
    displayName: 'Debug GitHub Integration Settings'
    inputs:
      targetType: inline
      script: |
        echo "Build.Repository.Name: $(Build.Repository.Name)"
        echo "System.PullRequest.PullRequestNumber: $(System.PullRequest.PullRequestNumber)"
        echo "System.AccessToken exists: $([[ ! -z "${SYSTEM_ACCESSTOKEN}" ]] && echo 'Yes' || echo 'No')"
        echo "SYSTEM_ACCESSTOKEN prefix: ${SYSTEM_ACCESSTOKEN:0:4}..."
        echo "Build.SourceBranch: $(Build.SourceBranch)"
        echo "Build.SourceVersion: $(Build.SourceVersion)"
        echo "System.TeamFoundationCollectionUri: $(System.TeamFoundationCollectionUri)"
        echo "System.TeamProject: $(System.TeamProject)"

  # 3) Apply OpenAI config via UMI-login script
  - task: Bash@3
    displayName: '⚙️  Apply OpenAI Config'
    inputs:
      targetType: inline
      script: |
        cd .pipelines/prchecks/CveSpecFilePRCheck
        if [ ! -f apply-security-config.sh ]; then
          echo "❌ Cannot find apply-security-config.sh in $(pwd)"
          exit 1
        fi
        bash apply-security-config.sh --openaiModel=o3-mini

  # 4) Verify and use system Python
  - task: Bash@3
    displayName: '🐍 Verify System Python'
    inputs:
      targetType: inline
      script: |
        python3 --version
        which python3
        echo "Using system Python instead of downloading version"

  # 5) Run PR‐check entrypoint with GitHub authentication
  - task: Bash@3
    displayName: '🔍 Run PR Check'
    env:
      # Use System.AccessToken as fallback for GitHub authentication
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      # Use the CBL-Mariner bot PAT from key vault (primary auth method)
      GITHUB_TOKEN: $(githubPrPat)
      # Explicitly set GitHub repo name from Azure DevOps variables
      GITHUB_REPOSITORY: $(Build.Repository.Name)
      # Set PR number explicitly
      GITHUB_PR_NUMBER: $(System.PullRequest.PullRequestNumber)
      # Set the source branch and version
      BUILD_SOURCEBRANCH: $(Build.SourceBranch)
      SYSTEM_PULLREQUEST_SOURCECOMMITID: $(Build.SourceVersion)
    inputs:
      targetType: inline
      script: |
        # We're using SYSTEM_ACCESSTOKEN as our GitHub token (OAuth token)
        # DO NOT set GITHUB_ACCESS_TOKEN here
        
        echo "🔑 Using SYSTEM_ACCESSTOKEN for GitHub authentication"
        echo "Repository: ${GITHUB_REPOSITORY}"
        echo "PR Number: ${GITHUB_PR_NUMBER}"
        
        cd .pipelines/prchecks/CveSpecFilePRCheck
        chmod +x run-pr-check.sh

        # Build command with your flags
        CMD="./run-pr-check.sh"
        if [ "$FAIL_ON_WARNINGS"       = "True" ]; then CMD="$CMD --fail-on-warnings";      fi
        if [ "$USE_EXIT_CODE_SEVERITY" = "True" ]; then CMD="$CMD --exit-code-severity";   fi
        if [ "$POST_GITHUB_COMMENTS"   = "True" ]; then CMD="$CMD --post-github-comments"; fi
        if [ "$USE_GITHUB_CHECKS"      = "True" ]; then CMD="$CMD --use-github-checks";    fi

        echo "Running command: $CMD"
        $CMD
