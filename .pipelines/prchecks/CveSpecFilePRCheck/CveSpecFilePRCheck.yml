# prchecks/CveSpecFilePRCheck/CveSpecFilePRCheck.yml
# Trigger on PRs to fasttrack/abadawi/test/3.0 when .spec or .patch files change
trigger: none

pr:
  branches:
    include:
      - fasttrack/abadawi/test/3.0
  paths:
    include:
      - '**/*.spec'
      - '**/*.patch'

name: Automaton-OpenAI-PR-Check

pool:
  name: mariner-dev-build-1es-mariner2-amd64

parameters:
  - name: failOnWarnings
    displayName: Fail pipeline on warnings
    type: boolean
    default: false
  - name: useExitCodeSeverity
    displayName: Use different exit codes based on severity
    type: boolean
    default: true
  - name: postGitHubComments
    displayName: Post analysis results as GitHub PR comments
    type: boolean
    default: true
  - name: useGitHubChecks
    displayName: Use GitHub Checks API for status updates
    type: boolean
    default: true

variables:
  FAIL_ON_WARNINGS: ${{ parameters.failOnWarnings }}
  USE_EXIT_CODE_SEVERITY: ${{ parameters.useExitCodeSeverity }}
  POST_GITHUB_COMMENTS: ${{ parameters.postGitHubComments }}
  USE_GITHUB_CHECKS: ${{ parameters.useGitHubChecks }}

steps:
  # 1) Clone the repo
  - checkout: self
    fetchDepth: 2           # still just pull the last 2 commits
    persistCredentials: true # ‚Üê allow further git fetches

  # 2) Debug workspace (optional ‚Äî remove once paths are correct)
  - task: Bash@3
    displayName: 'üîç Debug: list workspace contents'
    inputs:
      targetType: inline
      script: |
        echo "Working directory: $(pwd)"
        ls -la .
        ls -la .pipelines/prchecks/CveSpecFilePRCheck || echo "Directory not found"
        echo "PR Source Branch: $(System.PullRequest.SourceBranch)"
        echo "PR Target Branch: $(System.PullRequest.TargetBranch)"
        echo "Modified files in PR:"
        git fetch origin "+refs/heads/${SYSTEM_PULLREQUEST_TARGETBRANCH}:refs/remotes/origin/${SYSTEM_PULLREQUEST_TARGETBRANCH}"
        git diff --name-only "origin/$(System.PullRequest.TargetBranch)" HEAD
        
  # 3) Apply OpenAI config via your UMI-login script
  - task: Bash@3
    displayName: '‚öôÔ∏è  Apply OpenAI Config'
    inputs:
      targetType: inline
      script: |
        # make sure we're in the folder containing the scripts
        cd .pipelines/prchecks/CveSpecFilePRCheck

        # fail fast if the script is missing
        if [ ! -f apply-security-config.sh ]; then
          echo "‚ùå Cannot find apply-security-config.sh in $(pwd)"
          exit 1
        fi

        # run the UMI-login + var-export script
        bash apply-security-config.sh --openaiModel=o3-mini

  # 4) Verify and use system Python
  - task: Bash@3
    displayName: 'üêç Verify System Python'
    inputs:
      targetType: inline
      script: |
        python3 --version
        which python3
        echo "Using system Python instead of downloading version"

  # 5) Run your PR‚Äêcheck entrypoint (installs deps & invokes Azure OpenAI)
  - task: Bash@3
    displayName: 'üîç Run PR Check'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      GITHUB_ACCESS_TOKEN: $(System.AccessToken)
      GITHUB_REPOSITORY: $(Build.Repository.Name)
      BUILD_SOURCEBRANCH: $(Build.SourceBranch)
    inputs:
      targetType: inline
      script: |
        cd .pipelines/prchecks/CveSpecFilePRCheck
        chmod +x run-pr-check.sh
        
        # Pass parameters to the script
        CMD="./run-pr-check.sh"
        if [ "$FAIL_ON_WARNINGS" = "True" ]; then
          CMD="$CMD --fail-on-warnings"
        fi
        if [ "$USE_EXIT_CODE_SEVERITY" = "True" ]; then
          CMD="$CMD --exit-code-severity"
        fi
        if [ "$POST_GITHUB_COMMENTS" = "True" ]; then
          CMD="$CMD --post-github-comments"
        fi
        if [ "$USE_GITHUB_CHECKS" = "True" ]; then
          CMD="$CMD --use-github-checks"
        fi
        
        echo "Running command: $CMD"
        $CMD
