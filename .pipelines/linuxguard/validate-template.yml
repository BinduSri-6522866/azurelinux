parameters:
- name: testPlatform
  type: string
  values:
    - qemu
    - azure

jobs:
- job: "validate${{ parameters.testPlatform }}"
  displayName: 'Validate ${{ parameters.testPlatform }}'
  dependsOn: images_amd64
  timeoutInMinutes: 60
  pool:
    type: linux
    name: TCB-Ubuntu-build-agent
    os: linux
    hostArchitecture: amd64
    runOnHost: true
    LinuxHostVersion:
      architecture: amd64
  variables: # More settings at https://aka.ms/obpipelines/yaml/jobs
    - name: ob_git_checkout
      value: true
    # this directory is uploaded to pipeline artifacts, reddog and cloudvault.
    # More info at https://aka.ms/obpipelines/artifacts
    - name: ob_outputDirectory
      value: '$(Build.SourcesDirectory)/out'
    - group: ipe_signing # brings ipe_signing_key_password
  steps:
    - task: PipAuthenticate@1
      displayName: Provision - Authenticate Pip
      inputs:
        onlyAddExtraIndex: false
        artifactFeeds: 'mariner/Mariner-Pypi-Feed'

    - bash: |
        set -euo pipefail
        echo "${SYSTEM_ACCESSTOKEN}" | az devops login
        mkdir -p $(ob_outputDirectory)
        mkdir -p /tmp/mariner/${BUILD_TARGET}/out
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      displayName: 'DevOps login'

    - task: DownloadPipelineArtifact@2
      displayName: "Download secure base (qcow2) image"
      inputs:
        buildType: current
        artifactName: "drop_build_$(BUILD_TARGET)_images_amd64"
        patterns: |
          image/secure-base/secure-base.qcow2
          update/secure-base/secure-base-update.qcow2
        targetPath: "/tmp/mariner/$(BUILD_TARGET)/out"

    - bash: |
        set -euo pipefail

        OUT_DIR=/tmp/mariner/${BUILD_TARGET}/out
        IMAGE_DIR=$OUT_DIR/secure-base
        mkdir -p $IMAGE_DIR
        mv $OUT_DIR/image/secure-base/secure-base.qcow2 $IMAGE_DIR/
        mv $OUT_DIR/update/secure-base/secure-base-update.qcow2 $IMAGE_DIR/
      displayName: 'Move images to the expected location'

    - bash: |
        set -euo pipefail
        $(Build.SourcesDirectory)/scripts/install-validate-prereqs.sh
      displayName: 'Install prerequisites'

    - task: DownloadSecureFile@1
      name: ipekey
      displayName: 'Download IPE signing key'
      inputs:
        secureFile: 'ipe-signing-key.pem'

    - task: DownloadPipelineArtifact@2
      displayName: "Download tools"
      inputs:
        buildType: current
        artifactName: "drop_build_$(BUILD_TARGET)_packages_amd64"
        patterns: "tools/solar"
        targetPath: "/tmp/mariner/"

    - bash: |
        set -euo pipefail
        mv /tmp/mariner/tools/solar /tmp/mariner/
        chmod +x /tmp/mariner/solar
      displayName: 'Fix tools path'

    - bash: |
        set -euo pipefail
        TEST_PLATFORM=${{ parameters.testPlatform }} $(Build.SourcesDirectory)/scripts/build-test-images.sh -o /tmp/mariner -a "$(ob_outputDirectory)" -k "$(ipekey.secureFilePath)"
      env:
        IPE_SIGNING_KEY_PASSWORD: "$(ipe_signing_key_password)"
      displayName: 'Build images'
      timeoutInMinutes: 40

    # If test platform is azure, we need to publish the test images
    - ${{ if eq(parameters.testPlatform, 'azure') }}:
      - bash: |
          set -euo pipefail
          $(Build.SourcesDirectory)/scripts/publish-sig-image.sh -o /tmp/mariner -a "$(ob_outputDirectory)"
        env:
          IMAGE_DEFINITION: pipeline-test-$(BUILD_TARGET)-$(System.DefinitionId)
        displayName: 'Publish images'
        timeoutInMinutes: 40

    - bash: |
        set -euo pipefail
        $(Build.SourcesDirectory)/scripts/validate-test-images.sh -o /tmp/mariner -a "$(ob_outputDirectory)" -k "$(ipekey.secureFilePath)"
      env:
        STEAMBOAT_TEST_RESOURCE_GROUP: linuxguard-validation-$(Build.BuildId)-$(BUILD_TARGET)
        TEST_PLATFORM: ${{ parameters.testPlatform }}
        IMAGE_DEFINITION: pipeline-test-$(BUILD_TARGET)-$(System.DefinitionId)
        IPE_SIGNING_KEY_PASSWORD: "$(ipe_signing_key_password)"
        STEAMBOAT_ACR_NAME: steamboat$(Build.BuildId)$(BUILD_TARGET)
      displayName: 'Validate images'
      timeoutInMinutes: 40

    - bash: |
        set -euo pipefail
        $(Build.SourcesDirectory)/scripts/validate-cleanup.sh
      env:
        STEAMBOAT_TEST_RESOURCE_GROUP: linuxguard-validation-$(Build.BuildId)-$(BUILD_TARGET)
        TEST_PLATFORM: ${{ parameters.testPlatform }}
      displayName: 'Cleanup'
      condition: always()
      timeoutInMinutes: 10
